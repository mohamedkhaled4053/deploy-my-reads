{"version":3,"sources":["BooksAPI.js","Book.js","SearchBooks.js","BookShelf.js","ListBooks.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","Book","book","myBooks","setMyBooks","forEach","b","id","shelf","className","style","width","height","backgroundImage","imageLinks","thumbnail","onChange","e","newShelf","target","value","newBooks","filter","fetch","method","body","JSON","stringify","then","res","json","BooksAPI","disabled","title","authors","join","SearchBooks","useState","searchedBooks","setSearchedBooks","query","setQuery","useEffect","mounted","maxResults","data","books","error","to","type","placeholder","length","map","BookShelf","name","textTransform","replace","ListBooks","App","path","element","ReactDOM","render","document","getElementById"],"mappings":"+MAAMA,EAAM,wCAERC,EAAQC,aAAaD,MAEpBA,IAAOA,EAAQC,aAAaD,MAAQE,KAAKC,SAASC,SAAS,IAAIC,QAAQ,IAE5E,IAAMC,EAAU,CACdC,OAAQ,mBACRC,cAAeR,G,sBCJV,SAASS,EAAT,GAA8C,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,WAsBpC,OANAD,EAAQE,SAAQ,SAAAC,GACXA,EAAEC,KAAOL,EAAKK,KACfL,EAAKM,MAAQF,EAAEE,UAKjB,6BACE,sBAAKC,UAAU,OAAf,UACE,sBAAKA,UAAU,WAAf,UACE,qBACEA,UAAU,aACVC,MAAO,CACLC,MAAO,IACPC,OAAQ,IACRC,gBAAgB,OAAD,OAASX,EAAKY,WAAaZ,EAAKY,WAAWC,UAAY,GAAvD,QAGnB,qBAAKN,UAAU,qBAAf,SACE,yBAAQO,SAlClB,SAAsBC,GACpB,IAAIC,EAAWD,EAAEE,OAAOC,MAEpBC,EAAWlB,EAAQmB,QAAO,SAAChB,GAAD,OAAOA,EAAEC,KAAOL,EAAKK,MAEnDL,EAAKM,MAAQU,EAEbG,EAAQ,sBAAOA,GAAP,CAAiBnB,IACzBE,EAAWiB,GDQO,SAACnB,EAAMM,GAC3Be,MAAM,GAAD,OAAIhC,EAAJ,kBAAiBW,EAAKK,IAAM,CAC/BiB,OAAQ,MACR1B,QAAQ,2BACHA,GADE,IAEL,eAAgB,qBAElB2B,KAAMC,KAAKC,UAAU,CAAEnB,YACtBoB,MAAK,SAACC,GAAD,OAASA,EAAIC,UCdnBC,CAAgB7B,EAAMgB,IAwBkBE,MAAOlB,EAAKM,OAAS,OAArD,UACE,wBAASwB,UAAQ,EAAjB,SACG9B,EAAKM,MAAO,aAAc,cAE7B,wBAAQY,MAAM,mBAAd,+BACA,wBAAQA,MAAM,aAAd,0BACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,0BAIN,qBAAKX,UAAU,aAAf,SAA6BP,EAAK+B,QAClC,qBAAKxB,UAAU,eAAf,SACGP,EAAKgC,QAAUhC,EAAKgC,QAAQC,KAAK,MAAQ,0BC/C7C,SAASC,EAAT,GAA+C,IAAxBjC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,WAAc,EACXiC,mBAAS,IADE,mBAC9CC,EAD8C,KAC/BC,EAD+B,OAE3BF,mBAAS,IAFkB,mBAE9CG,EAF8C,KAEvCC,EAFuC,KAyBnD,OAjBAC,qBAAU,WACR,IAAIC,GAAU,EAWd,OAVIH,EFgBc,SAACA,EAAOI,GAAR,OACpBrB,MAAM,GAAD,OAAIhC,EAAJ,WAAkB,CACrBiC,OAAQ,OACR1B,QAAQ,2BACHA,GADE,IAEL,eAAgB,qBAElB2B,KAAMC,KAAKC,UAAU,CAAEa,QAAOI,iBAE7BhB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACiB,GAAD,OAAUA,EAAKC,SEzBnBf,CAAgBS,EAAO,IAAIZ,MAAK,SAACC,GAC3Bc,IACDd,EAAIkB,MAAgCR,EAAiB,IAAzCA,EAAiBV,OAIlCU,EAAiB,IAGZ,WACLI,GAAU,KAEX,CAACH,IAGF,sBAAK/B,UAAU,eAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,cAAC,IAAD,CAAMuC,GAAG,mBAAmBvC,UAAU,eAAtC,mBAGA,qBAAKA,UAAU,6BAAf,SACE,uBACEwC,KAAK,OACLC,YAAY,mCACZlC,SA/BV,SAAsBC,GACpBwB,EAASxB,EAAEE,OAAOC,eAiChB,qBAAKX,UAAU,uBAAf,SACE,oBAAIA,UAAU,aAAd,SAC4B,IAAzB6B,EAAca,OACXb,EAAcc,KAAI,SAAClD,GAAD,OAClB,cAACD,EAAD,CAEEC,KAAMA,EACNC,QAASA,EACTC,WAAYA,GAHPF,EAAKK,OAKZ,wBClDP,SAAS8C,EAAT,GAAmD,IAA9BC,EAA6B,EAA7BA,KAAMnD,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,WACrC0C,EAAQ3C,EAAQmB,QAAO,SAACpB,GAAD,OAAUA,EAAKM,QAAU8C,KACpD,OACE,sBAAK7C,UAAU,YAAf,UACE,oBAAIC,MAAO,CAAE6C,cAAe,cAAgB9C,UAAU,kBAAtD,SACG6C,EAAKE,QAAQ,WAAY,SAE5B,qBAAK/C,UAAU,kBAAf,SACE,oBAAIA,UAAU,aAAd,SACGqC,EAAMM,KAAI,SAAClD,GAAD,OACT,cAACD,EAAD,CAEEC,KAAMA,EACNC,QAASA,EACTC,WAAYA,GAHPF,EAAKK,cCXjB,SAASkD,EAAT,GAA6C,IAAxBtD,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,WAInC,OACE,sBAAKK,UAAU,aAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,2CAEF,qBAAKA,UAAU,qBAAf,SACE,8BARa,CAAC,mBAAoB,aAAc,QAShC2C,KAAI,SAAC5C,GAAD,OAChB,cAAC6C,EAAD,CAEEC,KAAM9C,EACNL,QAASA,EACTC,WAAYA,GAHPI,UAOb,qBAAKC,UAAU,cAAf,SACE,cAAC,IAAD,CAAMuC,GAAG,UAAT,6BCOOU,MAxBf,WAAgB,IAAD,EACerB,mBAAS,IADxB,mBACRlC,EADQ,KACCC,EADD,KAQb,OAJAsC,qBAAU,WLMVnB,MAAM,GAAD,OAAIhC,EAAJ,UAAiB,CAAEO,YACrB8B,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACiB,GAAD,OAAUA,EAAKC,SKPHlB,MAAK,SAACC,GAAD,OAASzB,EAAWyB,QAC1C,IAGD,qBAAKpB,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEkD,KAAK,mBACLC,QAAS,cAACH,EAAD,CAAWtD,QAASA,EAASC,WAAYA,MAEpD,cAAC,IAAD,CACEuD,KAAK,UACLC,QAAS,cAACxB,EAAD,CAAajC,QAASA,EAASC,WAAYA,YCjB9DyD,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.cf7a6765.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\r\n\r\nlet token = localStorage.token;\r\n\r\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\r\n\r\nconst headers = {\r\n  Accept: \"application/json\",\r\n  Authorization: token,\r\n};\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then((res) => res.json())\r\n    .then((data) => data.book);\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then((res) => res.json())\r\n    .then((data) => data.books);\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ shelf }),\r\n  }).then((res) => res.json());\r\n\r\nexport const search = (query, maxResults) =>\r\n  fetch(`${api}/search`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ query, maxResults }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((data) => data.books);\r\n","import * as BooksAPI from \"./BooksAPI\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport function Book({ book, myBooks, setMyBooks }) {\r\n  function handleChange(e) {\r\n    let newShelf = e.target.value;\r\n    // remove the book from the array of books\r\n    let newBooks = myBooks.filter((b) => b.id !== book.id);\r\n    // change the shelf of the book\r\n    book.shelf = newShelf;\r\n    // add the updated book to the array of books\r\n    newBooks = [...newBooks, book];\r\n    setMyBooks(newBooks);\r\n    // update the API\r\n    BooksAPI.update(book, newShelf);\r\n  }\r\n\r\n  // recognize the books in the book list when we search\r\n  // when we search the book has no shelf so we add a shelf to it if it was in ours shelves already\r\n  myBooks.forEach(b => {\r\n    if(b.id === book.id ){\r\n      book.shelf = b.shelf\r\n    }\r\n  });\r\n\r\n  return (\r\n    <li>\r\n      <div className=\"book\">\r\n        <div className=\"book-top\">\r\n          <div\r\n            className=\"book-cover\"\r\n            style={{\r\n              width: 128,\r\n              height: 193,\r\n              backgroundImage: `url(${book.imageLinks ? book.imageLinks.thumbnail : \"\"})`,\r\n            }}\r\n          ></div>\r\n          <div className=\"book-shelf-changer\">\r\n            <select onChange={handleChange} value={book.shelf || 'none'}>\r\n              <option  disabled>\r\n                {book.shelf? 'Move to...': 'Add to...'}\r\n              </option>\r\n              <option value=\"currentlyReading\">Currently Reading</option>\r\n              <option value=\"wantToRead\">Want to Read</option>\r\n              <option value=\"read\">Read</option>\r\n              <option value=\"none\">None</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"book-title\">{book.title}</div>\r\n        <div className=\"book-authors\">\r\n          {book.authors ? book.authors.join(\", \") : \"no authors found\"}\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\n\r\nBook.propTypes={\r\n  book: PropTypes.object.isRequired,\r\n  myBooks: PropTypes.array.isRequired,\r\n  setMyBooks: PropTypes.func.isRequired\r\n}","import { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as BooksAPI from \"./BooksAPI\";\r\nimport { Book } from \"./Book\";\r\n\r\nexport function SearchBooks({ myBooks, setMyBooks }) {\r\n  let [searchedBooks, setSearchedBooks] = useState([]);\r\n  let [query, setQuery] = useState(\"\");\r\n\r\n  function handleChange(e) {\r\n    setQuery(e.target.value);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (query) {\r\n      BooksAPI.search(query, 20).then((res) => {\r\n        if (mounted) {\r\n          !res.error ? setSearchedBooks(res) : setSearchedBooks([]);\r\n        }\r\n      });\r\n    } else {\r\n      setSearchedBooks([]);\r\n    }\r\n\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, [query]);\r\n\r\n  return (\r\n    <div className=\"search-books\">\r\n      <div className=\"search-books-bar\">\r\n        <Link to=\"/deploy-my-reads\" className=\"close-search\">\r\n          Close\r\n        </Link>\r\n        <div className=\"search-books-input-wrapper\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search by title, author, or ISBN\"\r\n            onChange={handleChange} />\r\n        </div>\r\n      </div>\r\n      <div className=\"search-books-results\">\r\n        <ol className=\"books-grid\">\r\n          {searchedBooks.length !== 0\r\n            ? searchedBooks.map((book) => (\r\n              <Book\r\n                key={book.id}\r\n                book={book}\r\n                myBooks={myBooks}\r\n                setMyBooks={setMyBooks} />\r\n            ))\r\n            : \"no books found\"}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { Book } from \"./Book\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport function BookShelf({ name, myBooks, setMyBooks }) {\r\n  let books = myBooks.filter((book) => book.shelf === name);\r\n  return (\r\n    <div className=\"bookshelf\">\r\n      <h2 style={{ textTransform: \"capitalize\" }} className=\"bookshelf-title\">\r\n        {name.replace(/([A-Z])/g, \" $1\")}\r\n      </h2>\r\n      <div className=\"bookshelf-books\">\r\n        <ol className=\"books-grid\">\r\n          {books.map((book) => (\r\n            <Book\r\n              key={book.id}\r\n              book={book}\r\n              myBooks={myBooks}\r\n              setMyBooks={setMyBooks} />\r\n          ))}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nBookShelf.propTypes  = {\r\n  name: PropTypes.string.isRequired,\r\n  myBooks: PropTypes.array.isRequired,\r\n  setMyBooks: PropTypes.func.isRequired\r\n}","import { Link } from \"react-router-dom\";\r\nimport { BookShelf } from \"./BookShelf\";\r\n\r\nexport function ListBooks({ myBooks, setMyBooks }) {\r\n  // make array of shelves names\r\n  let shelvesNames = ['currentlyReading', 'wantToRead', 'read'];\r\n\r\n  return (\r\n    <div className=\"list-books\">\r\n      <div className=\"list-books-title\">\r\n        <h1>MyReads</h1>\r\n      </div>\r\n      <div className=\"list-books-content\">\r\n        <div>\r\n          {shelvesNames.map((shelf) => (\r\n            <BookShelf\r\n              key={shelf}\r\n              name={shelf}\r\n              myBooks={myBooks}\r\n              setMyBooks={setMyBooks} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"open-search\">\r\n        <Link to=\"/search\">Add a book</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Route, Routes } from \"react-router-dom\";\r\nimport * as BooksAPI from \"./BooksAPI\";\r\nimport { SearchBooks } from \"./SearchBooks\";\r\nimport { ListBooks } from \"./ListBooks\";\r\n\r\nfunction App() {\r\n  let [myBooks, setMyBooks] = useState([]);\r\n\r\n  // get list of books from API\r\n  useEffect(() => {\r\n    BooksAPI.getAll().then((res) => setMyBooks(res));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Routes>\r\n        <Route\r\n          path=\"/deploy-my-reads\"\r\n          element={<ListBooks myBooks={myBooks} setMyBooks={setMyBooks} />}\r\n        />\r\n        <Route\r\n          path=\"/search\"\r\n          element={<SearchBooks myBooks={myBooks} setMyBooks={setMyBooks} />}\r\n        />\r\n      </Routes>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport {BrowserRouter} from 'react-router-dom'\r\n\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}